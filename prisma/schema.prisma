generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  username         String
  password         String
  profile          Profile?
  photoPosts       PhotoPost[]
  communityPosts   CommunityPost[]
  photoComments    PhotoComment[]
  CommunityComment CommunityComment[]
  ArticleComment   ArticleComment[]
  Votes            Vote[]
  userVotes        UserVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  selectedAvatarIndex Int
  selectedTags        String[]
  intro               String?
  interestedTopics    String[]
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model PhotoPost {
  id          Int            @id @default(autoincrement())
  title       String
  likes       Int
  views       Int
  description String
  location    String
  geometry    Json // 地理位置座標
  comments    PhotoComment[]
  images      Image[]
  authorId    Int
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isEdit      Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photo_posts")
}

model PhotoComment {
  id       Int       @id @default(autoincrement())
  postId   Int
  authorId Int
  content  String
  likes    Int       @default(0)
  post     PhotoPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photo_comments")
}

model CommunityPost {
  id        Int                @id @default(autoincrement())
  title     String
  authorId  Int
  author    User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   Json
  comments  CommunityComment[]
  topicTags String[]
  likes     Int                @default(0)
  views     Int                @default(0)
  isEdit    Boolean
  images    Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("community_posts")
}

model CommunityComment {
  id       Int           @id @default(autoincrement())
  postId   Int
  authorId Int
  content  String
  likes    Int           @default(0)
  post     CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("community_comments")
}

model Vote {
  id               Int          @id @default(autoincrement())
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime
  participantCount Int          @default(0)
  isEnd            Boolean      @default(false)
  options          VoteOption[]
  userVotes        UserVote[]
  authorId         Int
  author           User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("votes")
}

model VoteOption {
  id        Int        @id @default(autoincrement())
  text      String
  voteId    Int
  vote      Vote       @relation(fields: [voteId], references: [id], onDelete: Cascade)
  userVotes UserVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vote_options")
}

model UserVote {
  id Int @id @default(autoincrement())

  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  voteId       Int?
  Vote         Vote?      @relation(fields: [voteId], references: [id], onDelete: Cascade)
  voteOptionId Int
  voteOption   VoteOption @relation(fields: [voteOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_votes")
}

model Article {
  id         Int              @id @default(autoincrement())
  title      String
  subTitle   String
  views      Int              @default(0)
  likes      Int              @default(0)
  content    Json
  topicTags  String[]
  comments   ArticleComment[]
  coverImage String
  images     Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles")
}

model ArticleComment {
  id        Int     @id @default(autoincrement())
  articleId Int
  authorId  Int
  content   String
  likes     Int     @default(0)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  User      User?   @relation(fields: [userId], references: [id])
  userId    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article_comments")
}

model Image {
  id              Int            @id @default(autoincrement())
  url             String
  publicId        String // 新增 publicId 欄位
  photoPostId     Int?
  communityPostId Int?
  articleId       Int?
  photoPost       PhotoPost?     @relation(fields: [photoPostId], references: [id], onDelete: Cascade)
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  article         Article?       @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}
